@page "/marchand"
@using QueteDuDragon.Data
@inject EtatJeu EtatJeu
@inject NavigationManager Navigation

@if (EtatJeu == null || EtatJeu.SelectedHero == null)
{
    <p>Erreur : Le héros ou l'état du jeu n'a pas été initialisé. Veuillez retourner en arrière et réessayer.</p>
    <button @onclick="Retourner">Retour</button>
}
else
{
    <h3>Magasin</h3>
    <p><strong>Bienvenue, @EtatJeu.SelectedHero.Name ! Vous pouvez acheter des objets en fonction de votre niveau.</strong></p>
    <p><strong>Niveau actuel :</strong> @EtatJeu.SelectedHero.Level</p>
    <p><strong>Objets à acheter :</strong> @(AllowedPurchases - EtatJeu.objetsCollectes.Count)</p>
    
    <div class="background-image">
        <div class="audio-circle">
            <p>Comment puis-je vous aider ?</p>
            <div class="dots">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
    </div>

    <div>
        @foreach (var item in MagasinObjets)
        {
            <button 
                @onclick="() => AcheterObjet(item)" 
                disabled="@IsItemDisabled(item)">
                @item
            </button>
        }
    </div>

    <div>
        <p><strong>Achat : </strong>@EtatJeu.objetsCollectes.Count objets</p>
    </div>

    <button @onclick="Retourner">Retour</button>
}
<style>
    .audio-circle {
        position: relative;
        width: 180px;
        height: 150px;
        background-color: rgba(0, 0, 0, 0.6);
        border-radius: 50%; /* Fait un cercle */
        display: flex;
        align-items: center;
        justify-content: center;
        text-align: center;
        color: white;
        font-weight: bold;
        font-size: 14px;
        padding: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3); /* Ombre pour un effet 3D */
        transform: translateY(-200px); /* Déplace le cercle vers le haut */
    }

    .audio-circle p {
        margin: 0;
    }

    .dots {
        position: absolute;
        bottom: 10px; /* Position des points sous le texte */
        display: flex;
        gap: 5px; /* Espacement entre les points */
    }

    .dots span {
        width: 10px;
        height: 10px;
        background-color: white;
        border-radius: 50%;
        animation: pulse 1.5s infinite ease-in-out;
    }

    .dots span:nth-child(1) {
        animation-delay: 0s;
    }

    .dots span:nth-child(2) {
        animation-delay: 0.3s;
    }

    .dots span:nth-child(3) {
        animation-delay: 0.6s;
    }

</style>
@code 
{
    private List<string> MagasinObjets = new List<string>
    {
        "Épée à deux mains", "Hache de guerre", "Arc long", "Dague", "Marteau de guerre",
        "Armure de plaque", "Bouclier enchanté",
        "Potion de vitesse", "Pierre de téléportation", "Sceau de protection", "Anneau de résistance",
        "Carte du monde détaillée", "Boussole magique", "Miroir magique"
    };

    // Définir les objets autorisés en fonction du niveau
    private int AllowedPurchases => EtatJeu.SelectedHero.Level switch
    {
        1 => 1,
        2 => 8,
        3 => 10,
        _ => 0
    };

    // Vérifie si un bouton doit être désactivé
    private bool IsItemDisabled(string item)
    {
        return EtatJeu.objetsCollectes.Contains(item) || EtatJeu.objetsCollectes.Count >= AllowedPurchases;
    }

    // Ajouter un objet acheté
    private void AcheterObjet(string objet)
    {
        if (!EtatJeu.objetsCollectes.Contains(objet) && EtatJeu.objetsCollectes.Count < AllowedPurchases)
        {
            EtatJeu.objetsCollectes.Add(objet);

            // Ajouter cet objet aux compétences du héros pour usage
            EtatJeu.SelectedHero.Skills.Add(objet);

            // Afficher un message dans la console (debugging)
            Console.WriteLine($"Objet acheté : {objet}");
        }
    }

    // Retour à la page précédente
    private void Retourner()
    {
        if (EtatJeu.SelectedMode == "Facile")
        {
            Navigation.NavigateTo("/mode-facile", forceLoad: true);
        }
        else if (EtatJeu.SelectedMode == "Difficile")
        {
            Navigation.NavigateTo("/mode-difficile", forceLoad: true);
        }
    }
}
