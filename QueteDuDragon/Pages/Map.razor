@page "/map"
@using QueteDuDragon.Data
@using QueteDuDragon.Data.Heroes
@inject NavigationManager NavigationManager
@inject EtatJeu EtatJeu

@code {
    [Parameter] public Hero? CurrentHero { get; set; }

    private static readonly string[] AvailableItems = { "Or", "Epee", "Armes √† feu", "fl√®ches", "haches", "arcs" };
    private Dictionary<(int row, int col), string> treasureMap = new();

    private void MoveHero(int deltaRow, int deltaCol)
    {
        if (CurrentHero != null)
        {
            var newRow = CurrentHero.Row + deltaRow;
            var newCol = CurrentHero.Col + deltaCol;

            // Emp√™che de sortir des limites de la carte
            if (newRow >= 1 && newRow < 14 && newCol >= 1 && newCol < 19)
            {
                CurrentHero.Row = newRow;
                CurrentHero.Col = newCol;
                CheckHeroLocation(newRow, newCol);
            }
        }
    }

    private bool showTreasurePopup = false;
    private string foundItem = string.Empty; // Stocke l'objet trouv√©

    private void ClosePopup()
    {
        showTreasurePopup = false;
    }

    private void CheckHeroLocation(int row, int col)
    {
        // Redirection en fonction de la position actuelle
        if (dungeonLocations.Contains((row, col)))
        {
            // D√©termine le donjon en fonction des coordonn√©es
            if (row == 1 && col == 1)
                NavigationManager.NavigateTo("donjon1");
            else if (row == 1 && col == 18)
                NavigationManager.NavigateTo("donjon2");
            else if (row == 13 && col == 1)
                NavigationManager.NavigateTo("donjon3");
            else if (row == 13 && col == 18)
                NavigationManager.NavigateTo("donjon4");
        }
        else if (row == 5 && col == 9)
        {
            // Donjon Boss
            NavigationManager.NavigateTo("Donjonboss");
        }
        else if (row == 7 && col == 9)
            // Shop
        {
            NavigationManager.NavigateTo("Magasin");
        }
        //tresors
        else if (IsTreasure(row, col) && treasureMap.TryGetValue((row, col), out var item))
        {
            showTreasurePopup = true;
            foundItem = item; // Attribue l'objet correspondant
            EtatJeu.AjouterObjetCollecte(item);
            treasureMap.Remove((row, col)); // Retire le tr√©sor de la carte (non r√©utilisable)
            treasureLocations.Remove((row, col));
        }
    }

    private List<(int row, int col)> treasureLocations = new()
    {
        (2, 5),
        (10, 10),
        (6, 15),
        (4, 8),
        (12, 3),
        (8, 18)
    };

    private List<(int row, int col)> dungeonLocations = new()
    {
        (1, 1),
        (1, 18),
        (13, 1),
        (13, 18)
    };

    private bool IsMountain(int row, int col)
    {
        return row == 0 || row == 14 || col == 0 || col == 19;
    }

    private bool IsTreasure(int row, int col)
    {
        return treasureLocations.Contains((row, col));
    }

    private bool IsHeroPosition(int row, int col)
    {
        return CurrentHero != null && CurrentHero.Row == row && CurrentHero.Col == col;
    }

    protected override void OnInitialized()
    {
        // Associe al√©atoirement les objets aux tr√©sors sans r√©p√©tition
        var random = new Random();
        List<string> availableItemsCopy = AvailableItems.ToList(); // Copie des objets disponibles
        foreach (var location in treasureLocations)
        {
            if (availableItemsCopy.Count > 0)
            {
                // Tire un objet al√©atoire
                var index = random.Next(availableItemsCopy.Count);
                treasureMap[location] = availableItemsCopy[index];
                availableItemsCopy.RemoveAt(index); // Supprime l'objet pour √©viter les r√©p√©titions
            }
        }
    }

}

<div class="map">
    @for (var row = 0; row < 15; row++)
    {
        @for (var col = 0; col < 20; col++)
        {
            <div class="cellule">
                @if (IsHeroPosition(row, col))
                {
                    <img src="Images/Hero.png" alt="Hero" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
                else if (IsTreasure(row, col))
                {
                    <img src="Images/Tresor.png" alt="Tresor" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
                else if (row == 1 && col == 1)
                {
                    <a href="donjon1">
                        <img src="Images/Donjon.png" alt="Donjon"
                             style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 1 && col == 18)
                {
                    <a href="donjon2">
                        <img src="Images/Donjon.png" alt="Donjon"
                             style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 13 && col == 1)
                {
                    <a href="donjon3">
                        <img src="Images/Donjon.png" alt="Donjon"
                             style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 13 && col == 18)
                {
                    <a href="donjon4">
                        <img src="Images/Donjon.png" alt="Donjon"
                             style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 0 || row == 14 || col == 0 || col == 19)
                {
                    <img src="Images/Montagne.png" alt="Montagne"
                         style="width: 100%; height: 100%; object-fit: cover;"/>
                }
                else if (row == 7 && col == 9)
                {
                    <img src="Images/shop.png" alt="Shop" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
                else if (row == 5 && col == 9)
                {
                    <a href="/Donjonboss">
                        <img src="Images/DonjonBoss.png" alt="donjonboss"
                             style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else
                {
                    <img src="Images/Plaine.png" alt="Plaine" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
            </div>
        }
    }
</div>
<div class="controls">
    <button @onclick="() => MoveHero(0, -1)">‚Üê</button>
    <button @onclick="() => MoveHero(-1, 0)">‚Üë</button>
    <button @onclick="() => MoveHero(0, 1)">‚Üí</button>
    <button @onclick="() => MoveHero(1, 0)">‚Üì</button>

</div>
@if (showTreasurePopup)
{
    <div class="popup-on-map">
        <div class="popup-content">
            <p>üéâ F√©licitations, vous avez trouv√© un tr√©sor :
                <strong>@foundItem</strong> !</p>
            <button @onclick="ClosePopup">OK</button>
        </div>
    </div>
}

<style>

    .popup-on-map {
        position: fixed;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .popup-content {
        background-color: #050505;
        border: 3px solid black;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
        text-align: center;
    }

    .popup-content p {
        font-size: 1.2em;
        margin-bottom: 15px;
    }

    .popup-content button {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 5px;
        font-size: 1em;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .map {
        display: grid;
        grid-template-rows: repeat(15, 1fr);
        grid-template-columns: repeat(20, 1fr);
        width: 100%;
        height: 100%;
        background-color: lightgreen;
    }

    .row {
        display: contents;
    }

    .cell {
        border: 1px solid black;
        width: 30px;
        height: 30px;
    }
</style>