@using QueteDuDragon.Data.Heroes
@inject NavigationManager NavigationManager

@code {
        [Parameter]
        public Hero? CurrentHero { get; set; }

    private void MoveHero(int deltaRow, int deltaCol)
    {
        if (CurrentHero != null)
        {
            int newRow = CurrentHero.Row + deltaRow;
            int newCol = CurrentHero.Col + deltaCol;

            // Empêche de sortir des limites de la carte
            if (newRow >= 1 && newRow < 14 && newCol >= 1 && newCol < 19)
            {
                CurrentHero.Row = newRow;
                CurrentHero.Col = newCol;
                CheckHeroLocation(newRow, newCol);
            }
        }
    }
    private void CheckHeroLocation(int row, int col)
    {
        // Redirection en fonction de la position actuelle
        if (dungeonLocations.Contains((row, col)))
        {
            // Déterminez le donjon en fonction des coordonnées
            if (row == 1 && col == 1)
                NavigationManager.NavigateTo("donjon1");
            else if (row == 1 && col == 18)
                NavigationManager.NavigateTo("donjon2");
            else if (row == 13 && col == 1)
                NavigationManager.NavigateTo("donjon3");
            else if (row == 13 && col == 18)
                NavigationManager.NavigateTo("donjon4");
        }
        else if (row == 5 && col == 9)
        {
            // Donjon Boss
            NavigationManager.NavigateTo("Donjonboss");
        }
        else if (row == 7 && col == 9)
        {
            NavigationManager.NavigateTo("Magasin");
        }
    }
    private List<(int row, int col)> treasureLocations = new List<(int row, int col)>()
    {
        (2, 5),
        (10, 10),
        (6, 15),
        (4, 8),
        (12, 3),
        (8, 18)
    };
    private List<(int row, int col)> dungeonLocations = new List<(int row, int col)>()
    {
        (1, 1),
        (1, 18),
        (13, 1),
        (13, 18)
    };

    private bool IsMountain(int row, int col)
    {
        return row == 0 || row == 14 || col == 0 || col == 19;
    }

    private bool IsTreasure(int row, int col)
    {
        return treasureLocations.Contains((row, col));
    }
    private bool IsHeroPosition(int row, int col)
    {
        return CurrentHero != null && CurrentHero.Row == row && CurrentHero.Col == col;
    }
}

<div class="map">
    @for (int row = 0; row < 15; row++)
    {
        @for (int col = 0; col < 20; col++)
        {
            <div class="cellule">
                @if (IsHeroPosition(row, col)) // Si c'est la position du héros
                {
                    <img src="Images/Hero.png" alt="Hero" style="width: 100%; height: 100%; object-fit: cover;" />
                }
                else if (IsTreasure(row, col))
                {
                    <img src="Images/Tresor.png" alt="Tresor" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
                else if (row == 1 && col == 1)
                {
                    <a href="donjon1">
                        <img src="Images/Donjon.png" alt="Donjon" style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 1 && col == 18)
                {
                    <a href="donjon2">
                        <img src="Images/Donjon.png" alt="Donjon" style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 13 && col == 1)
                {
                    <a href="donjon3">
                        <img src="Images/Donjon.png" alt="Donjon" style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 13 && col == 18)
                {
                    <a href="donjon4">
                        <img src="Images/Donjon.png" alt="Donjon" style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else if (row == 0 || row == 14 || col == 0 || col == 19)
                {
                    <img src="Images/Montagne.png" alt="Montagne" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
                else if (row == 7 && col == 9)
                {
                    <img src="Images/shop.png" alt="Shop" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
                else if (row == 5 && col == 9)
                {
                    <a href="/Donjonboss">
                        <img src="Images/DonjonBoss.png" alt="donjonboss" style="width: 100%; height: 100%; object-fit: cover;"/>
                    </a>
                }
                else
                {
                    <img src="Images/Plaine.png" alt="Plaine" style="width: 100%; height: 100%; object-fit: cover;"/>
                }
            </div>
        }
    }
</div>
<div class="controls">
    <button @onclick="() => MoveHero(0, -1)">←</button>
    <button @onclick="() => MoveHero(-1, 0)">↑</button>
    <button @onclick="() => MoveHero(0, 1)">→</button>
    <button @onclick="() => MoveHero(1, 0)">↓</button>
    
</div>
<style>
    .map {
        display: grid;
        grid-template-rows: repeat(15, 1fr);
        grid-template-columns: repeat(20, 1fr);
        width: 100%;
        height: 100%;
        background-color: lightgreen;
    }

    .row {
        display: contents;
    }

    .cell {
        border: 1px solid black;
        width: 30px;
        height: 30px;
    }
</style>