@page "/mode-facile"
@using QueteDuDragon.Data
@using QueteDuDragon.Data.Heroes
@inject NavigationManager Navigation
@inject EtatJeu EtatJeu


<p><strong>Bienvenue dans le mode facile !</strong></p>

<div style="display: flex; height: 90vh;">
    <!-- Cadre à gauche -->
    <div style="width: 45%; background-color: black; padding: 20px; border-right: 1px solid #ccc; box-shadow: 2px 0 5px rgba(0,0,0,0.1);">
        @if (EtatJeu.SelectedHero != null)
        {
            <section>
                <img src="Images/genie/@EtatJeu.SelectedHero.ImageName"alt="Héros" class="hero-image"/>
                <p><strong>Nom :</strong> @EtatJeu.SelectedHero.Name</p>
                <p><strong>Héros :</strong> @EtatJeu.SelectedHero.GetType().Name</p>
                <p><strong>Points de vie :</strong> @EtatJeu.SelectedHero.pointsVie</p>
                <p><strong>Niveau actuel :</strong> @EtatJeu.SelectedHero.Level</p>
                <p><strong>Objets collectés :</strong> @EtatJeu.objetsCollectes.Count</p>
                <p><strong>Compétences :</strong></p>
                <ul>
                    @foreach (var skill in EtatJeu.SelectedHero.Skills.Distinct())
                    {
                        <li>@skill</li>
                    }
                </ul>
               
                <button @onclick="AllerAuMagasin">Aller au Magasin </button>
                <button @onclick="Retourner">Accueil</button>
            </section>
        }
        else
        {
            <p>Erreur : Aucune information sur le héros disponible. Veuillez sélectionner un héros.</p>
            <p>Debug : EtatJeu.SelectedHero est @((EtatJeu.SelectedHero == null ? "null" : "non-null"))</p>
        }
    </div>

    <div class="direction-buttons">
        <button @onclick="() => MovePlayer(-1, 0)">⬆️</button>
        <div class="horizontal-buttons">
            <button @onclick="() => MovePlayer(0, -1)">⬅️</button>
            <button @onclick="() => MovePlayer(0, 1)">➡️</button>
        </div>
        <button @onclick="() => MovePlayer(1, 0)">⬇️</button>
    </div>


    <!-- Partie centrale et droite -->
    <div style="flex-grow: 1; padding: 20px; display: flex; align-items: center; justify-content: center;">
        <div class="map-container">
            <div class="map">
                @for (int row = 0; row < 15; row++)
                {
                    @for (int col = 0; col < 20; col++)
                    {
                        <div class="cellule">
                            @if (IsTreasure(row, col))
                            {
                                <img src="Images/Tresor.png" alt="Tresor" />
                            }
                            else if (row == 1 && col == 1)
                            {
                                <a href="donjon1">
                                    <img src="Images/Donjon.png" alt="Donjon" />
                                </a>
                            }
                            else if (row == 1 && col == 18)
                            {
                                <a href="donjon2">
                                    <img src="Images/Donjon.png" alt="Donjon" />
                                </a>
                            }
                            else if (row == 13 && col == 1)
                            {
                                <a href="donjon3">
                                    <img src="Images/Donjon.png" alt="Donjon" />
                                </a>
                            }
                            else if (row == 13 && col == 18)
                            {
                                <a href="donjon4">
                                    <img src="Images/Donjon.png" alt="Donjon" />
                                </a>
                            }
                            else if (IsMountain(row, col))
                            {
                                <img src="Images/Montagne.png" alt="Montagne" />
                            }
                            else if (row == 7 && col == 9)
                            {
                                <img src="images/Shop.png" alt="Shop" />
                            }
                            else if (row == playerRow && col == playerCol)  
                            {
                                <img src="images/Hero.png" alt="Joueur" />
                            }
                            else if (row == 5 && col == 9)
                            {
                                <button @onclick="CheckAccessToDonjonBoss" class="donjon-boss-button">
                                    <img src="Images/DonjonBoss.png" alt="donjonboss" />
                                </button>
                            }
                            else
                            {
                                <img src="Images/Plaine.png" alt="Plaine" />
                            }
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

<div class="@popupClass" style="display: @(showPopup ? "block" : "none");">
    <p>@popupMessage</p>
</div>

<style>
    .map-container {
        width: 100%;
        height: 90%;
    }

    .map {
        display: grid;
        grid-template-rows: repeat(15, 1fr);
        grid-template-columns: repeat(20, 1fr);
        width: 100%;
        height: 100%;
        background-color: lightgreen;
    }

    .cellule img {
        width: 40%;
        height: 80%;
        object-fit: cover;
    }

    .hero-image {
        width: 180px;
        height: auto;
        margin: 10px;
    }

    .donjon-boss-button {
        all: unset; /* Supprime les styles par défaut du bouton */
        display: block;
        width: 80%;
        height: 80%;
        text-align: center;
        cursor: pointer;

    }
    
    .donjon-boss-button img {
        all: unset;
        width: 80%; /* image occupe toute la cellule */
        height: 100%; /* hauteur de l'image */
        object-fit: cover; /* proportions de l'image */
    }


    .cellule img[alt="Joueur"] {
        border: 2px solid red;
    }


    .direction-buttons {
        display: flex;
        flex-direction: column;
        align-items: center;
        margin-bottom: 10px;
    }

    .direction-buttons button {
        width: 40px;
        height: 40px;
        margin: 5px;
        border: none;
        background-color: #444;
        color: white;
        border-radius: 5px;
        font-size: 16px;
        cursor: pointer;
    }

    .direction-buttons button:hover {
        background-color: #666;
    }

    .horizontal-buttons {
        display: flex;
        justify-content: center;
        margin: 5px;
    }

    .horizontal-buttons button {
        margin: 0 10px;
    }

    .popup-orange {
        position: fixed;
        top: 10%;
        right: 10%;
        background-color: black;
        color: white;
        padding: 20px;
        border: 2px solid #444;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }

    .popup-blue {
        position: fixed;
        top: 10%;
        right: 10%;
        background-color: blue;
        color: white;
        padding: 20px;
        border: 2px solid #444;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }

    .popup-red {
        position: fixed;
        top: 10%;
        right: 10%;
        background-color: red;
        color: white;
        padding: 20px;
        border: 2px solid #444;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        z-index: 1000;
    }



</style>

@code {
    private string popupClass = "";
    private int playerRow = 7;
    private int playerCol = 9;
    private List<(int row, int col)> treasureLocations = new()
    {
        (2, 5), (10, 10), (6, 15), (4, 8), (12, 3), (8, 18)
    };

    private bool showPopup = false;
    private string popupMessage = "";

    private bool IsTreasure(int row, int col) => treasureLocations.Contains((row, col));

    private bool IsMountain(int row, int col) => row == 0 || row == 14 || col == 0 || col == 19;

    private void AllerAuMagasin()
    {
        Navigation.NavigateTo("/marchand");
    }

    private void Retourner()
    {
        Navigation.NavigateTo("/");
    }

    private async Task CheckAccessToDonjonBoss()
    {
        if (EtatJeu.SelectedHero.pointsVie >= 30)
        {
            Navigation.NavigateTo("/donjonboss");
        }
        else
        {
            popupMessage = "Vous n'avez pas assez de points pour affronter le Boss.";
            popupClass = "popup-red";
            showPopup = true;

            // Masquer le pop-up après 2 secondes
            Task.Delay(3000).ContinueWith(_ =>
            {
                showPopup = false;
                InvokeAsync(StateHasChanged);
            });
        }
    }

    private string GetExperienceLevel()
    {
        int nbObjets = EtatJeu.objetsCollectes.Count;
        if (nbObjets >= 7) return "3";
        if (nbObjets >= 4) return "2";
        return "1";
    }
    
    private List<string> treasureMessages = new()
    {
        "Vous avez trouvé une bourse d'or bien remplit!",
        "Une épée forgée par les elfes vient s'ajouter à votre équipement.",
        "Votre carquois est désormais rempli de flèches empoisonnées.",
        "Vous avez mis la main sur un bâton magique capable d'invoquer des créatures élémentaires.",
        "Une armure en mithril, légère et résistante, vous protège désormais.",
        "Quel coup de chance! Vous venez de découvrir un arc enchanté qui tire des flèches de feu."
    };

    private int treasuresCollected = 0;


    private void MovePlayer(int rowChange, int colChange)
    {
        int newRow = playerRow + rowChange;
        int newCol = playerCol + colChange;

        // Assurez-vous que le joueur reste dans les limites de la carte
        if (newRow >= 0 && newRow < 15 && newCol >= 0 && newCol < 20)
        {
            playerRow = newRow;
            playerCol = newCol;
            StateHasChanged();

            if (IsTreasure(playerRow, playerCol) && treasuresCollected < treasureMessages.Count)
            {
                popupMessage = treasureMessages[treasuresCollected];
                EtatJeu.objetsCollectes.Add($"Objet {treasuresCollected + 1}");
                treasuresCollected++;
                popupClass = "popup-orange";
                showPopup = true;


                updateHeroLevel();
                
                
                Task.Delay(3000).ContinueWith(_ =>
                {
                    showPopup = false;
                    InvokeAsync(StateHasChanged);
                });
            }
            else if (playerRow == 1 && playerCol == 1)
            {
                Navigation.NavigateTo("/donjon1");
            }
            else if (playerRow == 1 && playerCol == 18)
            {
                Navigation.NavigateTo("/donjon2");
            }
            else if (playerRow == 5 && playerCol == 9)

            {
                _ = CheckAccessToDonjonBoss();
                
            }
            else if (playerRow == 13 && playerCol == 1)
            {
                Navigation.NavigateTo("/donjon3");
            }
            else if (playerRow == 13 && playerCol == 18)
            {
                Navigation.NavigateTo("/donjon4");
            }
        }
    }

    private void updateHeroLevel()
    {
        int currentLevel = EtatJeu.SelectedHero.Level;
        int newLevel = treasuresCollected switch
        {
            >= 5 => 3,
            >= 2 => 2,
            _ => 1
        };
        if (newLevel > currentLevel)
        {
            EtatJeu.SelectedHero.Level = newLevel;

            popupMessage = newLevel switch
            {
                2 => "Vous etes au Niveau 2",
                3 => "Vous etes au Niveau 3"
            };

            popupClass = "popup-blue";
            showPopup = true;
            Task.Delay(2000).ContinueWith(_ =>
            {
                showPopup = false;
                InvokeAsync(StateHasChanged);
            });
        }
    }
    
}
